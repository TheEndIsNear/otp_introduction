<!-- livebook:{"persist_outputs":true} -->

# Intro to OTP

## What is OTP

* Set of Patterns/Behaviors for common tasks.
* A way to encapsulate state within a process.
* Supervision of processes.
* Concurrency within Elixir/Erlang

## Simple Stack Example without GenServer

```elixir
defmodule SimpleStackExample do
  def loop(state) do
    receive do
      {:push, val} ->
        loop([val | state])

      {:pop, pid} ->
        {hd, tl} = pop(state)
        send(pid, hd)
        loop(tl)

      _ ->
        IO.puts("INVALID OPTION")
        loop(state)
    end
  end

  defp pop([]), do: {[], []}
  defp pop([hd | tl]), do: {hd, tl}
end

pid = spawn(SimpleStackExample, :loop, [[1]])

send(pid, {:push, 2})
send(pid, {:pop, self()})
send(pid, {:pop, self()})
send(pid, {:pop, self()})

IEx.Helpers.flush()
```

```output
2
1
[]
```

```output
:ok
```

## Simple Stack Example with GenServer

```elixir
defmodule SimpleStackExample2 do
  use GenServer

  def push(val), do: GenServer.cast(__MODULE__, {:push, val})
  def pop, do: GenServer.call(__MODULE__, :pop)
  def stop, do: GenServer.cast(__MODULE__, :stop)

  def start_link(initial_state) do
    GenServer.start_link(__MODULE__, initial_state, name: __MODULE__)
  end

  @impl true
  def init(initial_state), do: {:ok, initial_state}

  @impl true
  def handle_cast({:push, val}, state) do
    {:noreply, [val | state]}
  end

  def handle_cast(:stop, state) do
    {:stop, :normal, state}
  end

  @impl true
  def handle_call(:pop, _, []) do
    {:reply, [], []}
  end

  def handle_call(:pop, _, [hd | tl]) do
    {:reply, hd, tl}
  end
end

SimpleStackExample2.start_link([1])

SimpleStackExample2.push(5)
SimpleStackExample2.push(3)
IO.inspect(SimpleStackExample2.pop())
IO.inspect(SimpleStackExample2.pop())
IO.inspect(SimpleStackExample2.pop())
SimpleStackExample2.stop()
```

```output
3
5
1
```

```output
:ok
```

## Simple Supervisor

```elixir
defmodule SimpleSupervisor do
  use Supervisor

  def start_link(initial_arg) do
    Supervisor.start_link(__MODULE__, initial_arg, name: __MODULE__)
  end

  def init(_initial_arg) do
    children = [
      %{
        id: SimpleStackExample2,
        start: {SimpleStackExample2, :start_link, [1]}
      }
    ]

    Supervisor.init(children, strategy: :one_for_one)
  end
end

SimpleStackExample2.stop()
{:ok, sup} = SimpleSupervisor.start_link([])
```

```output
warning: variable "sup" does not exist and is being expanded to "sup()", please use parentheses to remove the ambiguity or change the variable name
  otp_presentation.livemd#cell:20

```

```elixir
Process.whereis(SimpleStackExample2)
```
